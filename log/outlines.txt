('3', 'assert', '0 <= i < |numbers|;')
('11', 'assert', '|interspersed| == if |numbers| > 0 then 2 * |numbers| - 1 else 0;')
('2', 'assert', '0 <= interspersed < 2 * numbers.Length;')
('9', 'assert', '0 <= i;')
('8', 'assert', '0 < i < |numbers|;')
('6', 'assert', '|interspersed| == 2 * |numbers| - 1;')
('7', 'assert', '0 <= i < |numbers|;')
('7', 'assert', '0 <= i < |interspersed|;')
('4', 'assert', '0 <= i < numbers.Length;')
('7', 'assert', '\n    assert forall i :: 0 <= i < |interspersed| ==> (i % 2 == 0) <==> interspersed[i] == numbers[i / 2];')
